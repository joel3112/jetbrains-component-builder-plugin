builder.name=Component Builder
# Settings
builder.settings.title=Component Builder
builder.settings.description=Select the item to edit its template and configuration or enabled/disable each one
# Settings - Item Editor
builder.settings.parent.legend=The parent items will only appear when you create a new file relative to the <b>clicked folder</b>.
builder.settings.child.legend=The item will only appear for files when a new file is created that matches the <b>parent file clicked</b> and the name will be the same as the file selected.
# Settings - Item Editor - Display Group
builder.settings.group.display=Display Information
builder.settings.group.display.description=This information will be shown when you create a new file.<br>The icon will be generated from the extension related to the path value.
builder.settings.name=Name:
builder.settings.icon=Icon:
# Settings - Item Editor - File Group
builder.settings.tree.action.add=Add
builder.settings.tree.action.add.parent=File Type
builder.settings.tree.action.add.child=Child File Type
builder.settings.tree.action.remove=Remove
builder.settings.tree.action.duplicate=Duplicate
builder.settings.tree.action.up=Move Up
builder.settings.tree.action.down=Move Down
builder.settings.group.file=File Information
builder.settings.group.file.variables.description=For these values, you can use variables with the following syntax: <code>$VARIABLE_NAME$</code>
builder.settings.filePath=File path:
builder.settings.filePath.legend=<icon src='AllIcons.General.Information'>\u00A0No regex and must be ended with the extension (e.g. <code><b>.tsx</b></code>). For include directories, must be started with slash (<code><b>/</b></code>).
builder.settings.filePath.example=<small>e.g., <code>$PASCAL_NAME$.test.tsx</code></small>
builder.settings.regexMatch=Regex to match:
builder.settings.regexMatch.legend=<icon src='AllIcons.General.Information'>\u00A0This must be a regex for matching the file path with this item.<br> The regex must start with the previous path capture (<code><b>.*\\/</b></code>) and ends with the extension(<code><b>\\.tsx</b></code>).
builder.settings.regexPath.example=<small>e.g., <code>.*\\/$PASCAL_NAME$\\.tsx</code></small>
builder.settings.template=Template:
# New Popup
builder.popup.create.title=Create {0}
# New Popup - Name input
builder.popup.create.name.label=Name:
builder.popup.create.name.validation.empty=Name must not be empty
builder.popup.create.name.validation.specialCharacters=Name must not have special characters
# New Popup - Advanced options
builder.popup.create.advanced.options.title=Advanced options
builder.popup.create.advanced.options.select.children=<small>Select the children to create at the same time:</small>
# Notifications
builder.notification.create.success=Builder File <b>{0}</b> successfully created
builder.notification.create.error=Builder File <b>{0}</b> is already exists at <i>{1}</i>
# Variables Dialog
builder.dialog.variables.button.open=Edit Variables...
builder.dialog.variables.title=Edit Variables
builder.dialog.variables.description=The variable NAME is predefined and will be replaced with the component name.<br>You can use the variable NAME in another variable expression. Example: snakeCase(NAME)
builder.dialog.variables.table.column.name=Name
builder.dialog.variables.table.column.expression=Expression
