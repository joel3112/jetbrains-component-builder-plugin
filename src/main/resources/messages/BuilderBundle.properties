builder.name=Component Builder
# Settings
builder.settings.title=Component Builder
builder.settings.description=Select the file type to edit its template and configuration
# Settings - Item Editor
builder.settings.isChildFile.legend=The item will only appear for files when a new file is created that matches the parent file path. and the name will be the same as the file selected.
# Settings - Item Editor - Display Group
builder.settings.group.display=Display Information
builder.settings.group.display.description=This information will be shown when you create a new file.<br>The icon will be generated from the extension related to the "File path" value.
builder.settings.name=Name:
builder.settings.icon=Icon:
# Settings - Item Editor - File Group
builder.settings.tree.action.add=Add
builder.settings.tree.action.add.parent=File Type
builder.settings.tree.action.add.child=Child File Type
builder.settings.tree.action.remove=Remove
builder.settings.tree.action.duplicate=Duplicate
builder.settings.group.file=File Information
builder.settings.group.file.description=For these values, you can use the following variables:<br>- ${NAME}: Component name (entered by user)<br>- ${KEBAB_NAME}: Component name in kebab-case<br>- ${PASCAL_NAME}: Component name in PascalCase<br>- ${CAMEL_NAME}: Component name in camelCase<br>- ${REACT_HOOK_NAME}: Component name in react hook case (started with use)
builder.settings.filePath=File path:
builder.settings.filePath.legend=<icon src='AllIcons.General.Information'> No regex. For include directories, must be started with /. <br>Path to the file to be created, relative to the clicked folder or parent file.
builder.settings.regexPath=Regex path:
builder.settings.regexPath.legend=<icon src='AllIcons.General.Information'> This must be a regex that starts with .*\\/ and ends with \\.{extension} <br>Path to the parent file to be created, relative to the clicked folder and will be the matcher linked to its children.
builder.settings.template=Template:
# New Popup
builder.popup.create.title=Create {0}
# New Popup - Name input
builder.popup.create.name.label=Name:
builder.popup.create.name.validation.empty=Name must not be empty
builder.popup.create.name.validation.specialCharacters=Name must not have special characters
# Notifications
builder.notification.create.success=Builder File <b>{0}</b> successfully created
builder.notification.create.error=Builder File <b>{0}</b> is already exists at <i>{1}</i>
